#pragma once
#include "../Utility/Coordinate.h"
#include "../Gameplay/Gameobject.h"
/*!
* Коллайдер в виде эллипса
* Хранить можно либо как свойство Gameobject, либо просто как отдельный объект
* Задаёт эллипс в пространстве.
* 
* 
* 
* IsCollideWith() НЕ ТРОГАТЬ
* Остальное СИСТЕМНОЕ
*/

class Collider
{
public:
	/*!
	* Инициализация нулевого эллипса (точки с координатами (0, 0))
	* Не имеет родительского объекта (владельца)
	*/
	void Init();

	/*!
	* Инициализация нулевого эллипса (точки с координатами (0, 0))
	* Имеет родительский объект owner
	*/
	void Init(Gameobject* owner);

	/*!
	* Инициализация эллипса
	* pos - позиция центра эллипса
	* angle - угол поворота эллипса в РАДИАНАХ относительно центра (0 означает канонический вид, поворот против часовой)
	* size - длины полуосей
	* owner - родительский объект 
	*/
	void Init(Vector2F pos, float angle, Vector2F size, Gameobject* owner);

	/*!
	* Получает указатель на другой коллайдер that
	* Вернёт false, если данные эллипсы не пересекаются
	* Вернёт true, еслии пересекаются
	*
	* Функция НЕ 100% ТОЧНАЯ, использует приближения. Степени точности определяет COLLIDE_ITERATIONS 
	*/
	bool IsCollideWith(Collider* that);
protected:
	Gameobject* _my_obj; //! Объект, к которому привязан коллайдер. Пока никак не используется
	Vector2F _pos, _size;//! Позиция центра эллипса и длина его полуосей
	float _angle;        //! Угол поворота эллипса относительно центра против часовой стрелки в радианах

	const unsigned COLLIDE_ITERATIONS = 16; //! Определяет точность коллизий. Больше значение - точнее, но дольше. Не использовать числа меньше 4
};

